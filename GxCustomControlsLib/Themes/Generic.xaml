<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Gestionix.POS"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Class="Test.MainWindow">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/GxCustomControlsLib;component/Themes/Icons.xaml" />        
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    
    <!--INPUT TEXT-->
    <Style x:Key="HintTextBoxBaseStyle" TargetType="{x:Type TextBox}">   
        <Setter Property="IsTabStop" Value="False"/>                    
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HintTextBox}">
                    <Border Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="White" Padding="5" >
                        <Grid>
                            <TextBlock Name="PART_Watermark" Text="{TemplateBinding HintText}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="LightGray" Margin="3,0" TextTrimming="CharacterEllipsis"/>
                            <TextBox Name="PART_Writeable" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" VerticalAlignment="Stretch" Background="Transparent" Margin="0" 
                                     Text="{Binding Text, 
                                            Mode=TwoWay, 
                                            UpdateSourceTrigger=PropertyChanged,  
                                            RelativeSource={RelativeSource AncestorType={x:Type TextBox}}}"
                                     TextWrapping="{TemplateBinding TextWrapping}" 
                                     BorderThickness="0"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ElementName=PART_Writeable, Path=Text.IsEmpty}" Value="False">
                            <Setter TargetName="PART_Watermark" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_Writeable" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_Writeable}" />                            
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:HintTextBox}" BasedOn="{StaticResource HintTextBoxBaseStyle}"/>

    <Style TargetType="{x:Type local:HintCurrencyBox}" BasedOn="{StaticResource HintTextBoxBaseStyle}" />

    <Style TargetType="{x:Type local:HintPasswordBox}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HintPasswordBox}">
                    <Border Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="White" Padding="5" >
                        <Grid>
                            <TextBlock Name="PART_Watermark" Text="{TemplateBinding HintText}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="LightGray" Margin="3,0" TextTrimming="CharacterEllipsis"/>
                            <PasswordBox Name="PART_Writeable" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" VerticalAlignment="Stretch" Background="Transparent" Margin="0" 
                                         BorderThickness="0"    
                                         local:PasswordHelper.Attach="True"
                                         local:PasswordHelper.Password="{Binding Text,
                                                                         Mode=TwoWay, 
                                                                         UpdateSourceTrigger=PropertyChanged,
                                                                         RelativeSource={RelativeSource AncestorType={x:Type TextBox}}}"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Text.IsEmpty, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="PART_Watermark" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_Writeable" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_Writeable}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:HintNumericBox}" BasedOn="{StaticResource HintTextBoxBaseStyle}" />

    <Style TargetType="{x:Type local:HintSearchBox}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HintSearchBox}">
                    <Border Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="White" Padding="5" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.Resources>
                                <Style TargetType="{x:Type Button}">
                                    <Setter Property="IsTabStop" Value="False" />
                                    <Setter Property="Grid.Column" Value="1" />                                    
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Setter Property="Cursor" Value="Hand" />
                                </Style>
                            </Grid.Resources>
                            
                            <TextBlock Grid.Column="0" Name="PART_Watermark" Text="{TemplateBinding HintText}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="LightGray" Margin="3,0" TextTrimming="CharacterEllipsis" />
                            <TextBox Grid.Column="0" Name="PART_Writeable" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" VerticalAlignment="Stretch" Background="Transparent" Margin="0"
                                    Text="{Binding Text, 
                                        Mode=TwoWay, 
                                        UpdateSourceTrigger=PropertyChanged,  
                                        RelativeSource={RelativeSource AncestorType={x:Type TextBox}}}"
                                    TextWrapping="{TemplateBinding TextWrapping}" 
                                    BorderThickness="0"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                                        
                            <Button Name="PART_PrimaryIcon">
                                <Button.Content>
                                    <ContentControl Template="{StaticResource MagnifyingGlassTemplateIcon}" IsTabStop="False"/>
                                </Button.Content>    
                            </Button>
                            <Button Name="PART_SecundaryIcon">
                                <Button.Content>
                                    <ContentControl Template="{StaticResource CrossTemplateIcon}" IsTabStop="False"/>
                                </Button.Content>
                            </Button>            
                            <local:ProgressRing Name="PART_SearchingIndicator" Grid.Column="1" IsTabStop="False"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Text.IsEmpty, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="PART_Watermark" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_SecundaryIcon" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_PrimaryIcon" Property="Visibility" Value="Hidden" />                            
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Text.IsEmpty, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_PrimaryIcon" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_SecundaryIcon" Property="Visibility" Value="Hidden" />                            
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_Writeable" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_Writeable}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsSearching, RelativeSource={RelativeSource Self}}" Value="True">                            
                            <Setter TargetName="PART_SecundaryIcon" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_PrimaryIcon" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_SearchingIndicator" Property="IsActivated" Value="True" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--INPUT TEXT END-->

    <!-- ANIMATED -->   
    <Style TargetType="{x:Type local:ProgressRing}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ProgressRing}">
                    <Viewbox Stretch="Uniform">
                        <Canvas x:Name="PART_Container" Width="50" Height="50"/>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ANIMATED END -->

    <Style TargetType="{x:Type local:HintComboBox}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="30"/>
                            </Grid.ColumnDefinitions>
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                                </Canvas>
                                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Themes:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Setter Property="IsTabStop" Value="False"/>
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="ClickMode" Value="Press"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border x:Name="templateRoot" BorderBrush="#FFACACAC" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">                                                       
                                                        <!--<Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                            
                                                        </Border>-->
                                                        <ContentControl x:Name="Arrow" Template="{StaticResource DownArrowTemplateIcon}" HorizontalAlignment="Center" VerticalAlignment="Center" MinHeight="10" MinWidth="10" />
                                                    </Border>                                                    
                                                    <ControlTemplate.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFABADB3"/>
                                                            <!--<Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>-->
                                                            <!--<Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>-->
                                                        </MultiDataTrigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" TargetName="Arrow" Value="Black"/>
                                                        </Trigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot">
                                                                <Setter.Value>
                                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                        <GradientStop Color="#FFECF4FC" Offset="0"/>
                                                                        <GradientStop Color="#FFDCECFC" Offset="1"/>
                                                                    </LinearGradientBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
                                                        </MultiDataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
                                                            <!--<Setter Property="Background" TargetName="splitBorder">
                                                                <Setter.Value>
                                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                        <GradientStop Color="#FFEBF4FC" Offset="0"/>
                                                                        <GradientStop Color="#FFDCECFC" Offset="1"/>
                                                                    </LinearGradientBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF7EB4EA"/>-->
                                                        </MultiDataTrigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Background" TargetName="Arrow" Value="Black"/>
                                                        </Trigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot">
                                                                <Setter.Value>
                                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                        <GradientStop Color="#FFDAECFC" Offset="0"/>
                                                                        <GradientStop Color="#FFC4E0FC" Offset="1"/>
                                                                    </LinearGradientBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
                                                        </MultiDataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
                                                            <!--<Setter Property="Background" TargetName="splitBorder">-
                                                                <Setter.Value>
                                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                        <GradientStop Color="#FFDAEBFC" Offset="0"/>
                                                                        <GradientStop Color="#FFC4E0FC" Offset="1"/>
                                                                    </LinearGradientBrush>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5"/>-->
                                                        </MultiDataTrigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Background" TargetName="Arrow" Value="#FFBFBFBF"/>
                                                        </Trigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFD9D9D9"/>
                                                        </MultiDataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFBFBFBF"/>
                                                            <!--<Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>-->
                                                        </MultiDataTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Border x:Name="Border" Background="White" Margin="{TemplateBinding BorderThickness}">
                                <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <TextBox.Style>
                                        <Style TargetType="{x:Type TextBox}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="AllowDrop" Value="True"/>
                                            <Setter Property="MinWidth" Value="0"/>
                                            <Setter Property="MinHeight" Value="0"/>
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                                            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type TextBox}">
                                                        <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                            <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </MultiTrigger>
                        <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsReadOnly" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
